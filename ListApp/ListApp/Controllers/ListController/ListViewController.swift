//
//  ListViewController.swift
//  ListApp
//
//  Created by Satya on 06/11/20.
//  Copyright (c) 2020 Satya. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: class
{
  func displayApiListeItemsResponse(viewModel: [List.APIList.ViewModel])
}

class ListViewController: UIViewController, ListDisplayLogic
{
    var interactor: ListBusinessLogic?
    var router: (NSObjectProtocol & ListRoutingLogic & ListDataPassing)?
    var listView: UITableView!
    var lblNodataRepresentation : UILabel!
    var refreshControl = UIRefreshControl()
    var arrListItems = [List.APIList.ViewModel]()
    
    // MARK: Object lifecycle
    
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        configureUITableviewUI()
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListInteractor()
        let presenter = ListPresenter()
        let router = ListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setup()
        self.view.backgroundColor = UIColor.white
        Utility.sharedInstance.indicatorStartAnimating()
        fetchListItemsApi()
        NotificationCenter.default.addObserver(self, selector: #selector(orientationChanged), name: UIDevice.orientationDidChangeNotification, object: nil)
    }
    
    
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    // MARK: Do fetchListItemsApi
    
    func fetchListItemsApi()
    {
        let request = List.APIList.Request()
        interactor?.fetchApiListitems(request: request, isFromTestCase: false)
    }
    
    func displayApiListeItemsResponse(viewModel: [List.APIList.ViewModel])
    {
        DispatchQueue.main.async {
            self.refreshControl.endRefreshing()
            self.lblNodataRepresentation.isHidden = viewModel.count != 0
            self.arrListItems = viewModel
            self.listView.reloadData()
        }
        
    }
}


// MARK: Screen UI Configuration

/* here devloping screen using code without xib and story boards*/

extension ListViewController {
    func configureUITableviewUI() {
        listView = UITableView(frame: self.view.bounds)
        listView.delegate = self
        listView.dataSource = self
        self.view.addSubview(listView)
        listView.estimatedRowHeight = 3000
        listView.separatorStyle = .singleLine
        listView.separatorInset = UIEdgeInsets(top: 0, left: 15, bottom: 0, right: 15)
        listView.tableFooterView = UIView()
        
        //configure autolayouts
        listView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint(item: listView, attribute: .leading, relatedBy: .equal, toItem: self.view, attribute: .leading, multiplier: 1.0, constant: 0).isActive = true
        NSLayoutConstraint(item: listView, attribute: .trailing, relatedBy: .equal, toItem: self.view, attribute: .trailing, multiplier: 1.0, constant: 0).isActive = true
        NSLayoutConstraint(item: listView, attribute: .bottom, relatedBy: .equal, toItem: self.view, attribute: .bottom, multiplier: 1.0, constant: 0).isActive = true
        NSLayoutConstraint(item: listView, attribute: .top, relatedBy: .equal, toItem: self.view, attribute: .top, multiplier: 1.0, constant: 0).isActive = true
        
        listView.reloadData()
        
        //addRefreshControl to listview
        addRefreshControlToListView()
        
        //registering tablecell
        listView.register(ListTableViewCell.classForCoder(), forCellReuseIdentifier: "ListTableViewCell")
        configureNodatalabeUI()
        
    }
    
    func configureNodatalabeUI() {
        lblNodataRepresentation = UILabel(frame: CGRect.zero)
        lblNodataRepresentation.numberOfLines = 0
        lblNodataRepresentation.textAlignment = .center
        lblNodataRepresentation.font = UIFont.systemFont(ofSize: FONT_SIZE_TITLE_LABEL)
        lblNodataRepresentation.textColor = .black
        self.view.addSubview(lblNodataRepresentation)
        lblNodataRepresentation.isHidden = true
        lblNodataRepresentation.text = NO_DATA_TEXT
        
        //configure autolayouts
        lblNodataRepresentation.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint(item: lblNodataRepresentation, attribute: .leading, relatedBy: .equal, toItem: self.view, attribute: .leading, multiplier: 1.0, constant: 20).isActive = true
        NSLayoutConstraint(item: lblNodataRepresentation, attribute: .trailing, relatedBy: .equal, toItem: self.view, attribute: .trailing, multiplier: 1.0, constant: -20).isActive = true
        NSLayoutConstraint(item: self.view, attribute: .centerX, relatedBy: .equal, toItem: self.lblNodataRepresentation, attribute: .centerX, multiplier: 1.0, constant: 0).isActive = true
        NSLayoutConstraint(item: self.view, attribute: .centerY, relatedBy: .equal, toItem: self.lblNodataRepresentation, attribute: .centerY, multiplier: 1.0, constant: 0).isActive = true
        
        
    }
    
    // adding refresh control to list view
    func addRefreshControlToListView() {
        listView.refreshControl = refreshControl
        refreshControl.addTarget(self, action: #selector(refreshListView), for: .valueChanged)
    }
    
    // fetching api items on listview refresh
    @objc func refreshListView() {
        fetchListItemsApi()
    }
}


// MARK: UITableview Delegate and Datasource methods implementation

extension ListViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.arrListItems.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = listView.dequeueReusableCell(withIdentifier: "ListTableViewCell") as? ListTableViewCell ?? ListTableViewCell()
        cell.configureData(arrListItems[indexPath.row])
        return cell
    }
    
}

// MARK: Orientation observer
extension ListViewController {
    @objc func orientationChanged() {
        self.listView.reloadData()
    }
}
